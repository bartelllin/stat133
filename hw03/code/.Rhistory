is_interger(2L)
is_interger(2)
is_interger(2.1)
is_interger(pi)
is_interger(0.01)
2L
33L
is_positive()
is_positive()
#' @title is_integer
#' @description checks if x is an integer
#' @param x numeric value
#' @return if x is an interger or not
is_positive <- function(x) {
if (x > 0) {
return(TRUE)
} else {
return(FALSE)
}
}
is_positive(0.01)
is_positive(2)
is_positive(-2)
is_positive(0)
#' @title is_nonnegative
#' @description checks if x is nonnegative
#' @param x numeric value
#' @return if x is nonnegative
is_nonnegative <- function(x) {
if (x >= 0) {
return(TRUE)
} else {
return(FALSE)
}
}
is_nonnegative(0)
is_nonnegative(2)
is_nonnegative(-0.000001)
is_nonnegative(-2)
#' @title is_nonnegative
#' @description checks if x is nonnegative
#' @param x numeric value
#' @return if x is nonnegative
is_positive_integer <- function(x) {
if (is_positive(x) && is_interger(x)) {
return(TRUE)
} else {
return(FALSE)
}
}
is_positive_integer()
is_positive_integer()
is_positive_integer()
is_positive_integer(2)
is_positive_integer(2L)
is_positive_integer(0)
is_positive_integer(-2)
#' @title is_positive_integer
#' @description checks if x is positive and integer
#' @param x numeric value
#' @return if x is positive and integer
is_nonneg_integer <- function(x) {
is_nonneg_integer(x) && is_interger(x)
}
is_nonneg_integer()
is_nonneg_integer(0)
is_nonneg_integer(1)
is_nonneg_integer(-1)
is_nonneg_integer(-2.5)
is_nonnegative(x) && is_interger(x)
#' @title is_positive_integer
#' @description checks if x is positive and integer
#' @param x numeric value
#' @return if x is positive and integer
is_nonneg_integer <- function(x) {
is_nonnegative(x) && is_interger(x)
}
is_nonneg_integer(0)
is_nonneg_integer(1)
is_nonneg_integer(-1)
is_nonneg_integer(-2.5)
#' @title is_integer
#' @description checks if x is an integer
#' @param x numeric value
#' @return if x is an interger or not
is_interger <- function(x) {
x %% 2 == 0 || x %% 2 == 1
}
is_interger(-1)
is_interger(0)
is_interger(2L)
is_interger(2)
is_interger(2.1)
is_interger(pi)
is_interger(0.01)
#' @title is_positive
#' @description checks if x is positive
#' @param x numeric value
#' @return if x is positive
is_positive <- function(x) {
x > 0
}
is_positive(0.01)
is_positive(2)
is_positive(-2)
is_positive(0)
#' @title is_nonnegative
#' @description checks if x is nonnegative
#' @param x numeric value
#' @return if x is nonnegative
is_nonnegative <- function(x) {
x >= 0
}
is_nonnegative(0)
is_nonnegative(2)
is_nonnegative(-0.000001)
is_nonnegative(-2)
#' @title is_positive_integer
#' @description checks if x is positive and integer
#' @param x numeric value
#' @return if x is positive and integer
is_positive_integer <- function(x) {
is_positive(x) && is_interger(x)
}
is_positive_integer(2)
is_positive_integer(2L)
is_positive_integer(0)
is_positive_integer(-2)
#' @title is_positive_integer
#' @description checks if x is positive and integer
#' @param x numeric value
#' @return if x is positive and integer
is_nonneg_integer <- function(x) {
is_nonnegative(x) && is_interger(x)
}
is_nonneg_integer(0)
is_nonneg_integer(1)
is_nonneg_integer(-1)
is_nonneg_integer(-2.5)
is_probability()
#' @title is_probability
#' @description checks if x is a valid probability
#' @param x numeric value
#' @return if x is a probability
is_probability <- function(x) {
x>= 0 && x <= 1
}
is_probability(0)
is_probability(0,5)
is_probability(1)
is_probability(-1)
is_probability(1.00000001)
is_probability(0.5)
#' @title bin_factorial
#' @description calculates factorial of n
#' @param n nonnegative integer
#' @return factorial of n
bin_factorial <- function(n) {
t <- 1
for (i in 1:n) {
t <- t * i
}
t
}
bin_factorial(5)
bin_factorial(0)
return(t)
#' @title bin_factorial
#' @description calculates factorial of n
#' @param n nonnegative integer
#' @return factorial of n
bin_factorial <- function(n) {
t <- 1
if (n == 0) {
return(t)
}
for (i in 1:n) {
t <- t * i
}
t
}
bin_factorial(5)
bin_factorial(0)
bin_combinations <- function(n, k) {
bin_factorial(n)/(bin_factorial(k) * bin_factorial(n-k))
}
bin_combinations(5, 2)
bin_combinations(10, 3)
bin_combinations(4, 4)
bin_probability <- function(trials, success, prob) {
if (!is_nonneg_integer(trials) || !is_nonneg_integer(success)) {
stop("not negative integer")
}
if (!is_probability(prob)) {
stop("not a valid probability")
}
prob^k * (1 - prob)^(n-k)
}
bin_probability(5, 2, 0.5)
bin_probability <- function(trials, success, prob) {
if (!is_nonneg_integer(trials) || !is_nonneg_integer(success)) {
stop("not negative integer")
}
if (!is_probability(prob)) {
stop("not a valid probability")
}
prob^k * (1 - prob)^(trials-success)
}
bin_probability(5, 2, 0.5)
bin_probability <- function(trials, success, prob) {
if (!is_nonneg_integer(trials) || !is_nonneg_integer(success)) {
stop("not negative integer")
}
if (!is_probability(prob)) {
stop("not a valid probability")
}
prob^success * (1 - prob)^(trials-success)
}
bin_probability(5, 2, 0.5)
bin_probability <- function(trials, success, prob) {
if (!is_nonneg_integer(trials) || !is_nonneg_integer(success)) {
stop("not negative integer")
}
if (!is_probability(prob)) {
stop("not a valid probability")
}
prob^success * (1 - prob)^(trials-success) * 10
}
bin_probability(5, 2, 0.5)
bin_probability <- function(trials, success, prob) {
if (!is_nonneg_integer(trials) || !is_nonneg_integer(success)) {
stop("not negative integer")
}
if (!is_probability(prob)) {
stop("not a valid probability")
}
prob^success * (1 - prob)^(trials-success) * bin_probability(trials, success)
}
bin_probability(5, 2, 0.5)
bin_probability <- function(trials, success, prob) {
if (!is_nonneg_integer(trials) || !is_nonneg_integer(success)) {
stop("not negative integer")
}
if (!is_probability(prob)) {
stop("not a valid probability")
}
prob^success * (1 - prob)^(trials-success) * bin_probability(trials, success)
}
bin_probability(5, 2, 0.5)
prob^success * (1 - prob)^(trials-success) #* bin_probability(trials, success)
bin_probability <- function(trials, success, prob) {
if (!is_nonneg_integer(trials) || !is_nonneg_integer(success)) {
stop("not negative integer")
}
if (!is_probability(prob)) {
stop("not a valid probability")
}
prob^success * (1 - prob)^(trials-success) #* bin_probability(trials, success)
}
bin_probability(5, 2, 0.5)
bin_probability <- function(trials, success, prob) {
if (!is_nonneg_integer(trials) || !is_nonneg_integer(success)) {
stop("not negative integer")
}
if (!is_probability(prob)) {
stop("not a valid probability")
}
prob^success * (1 - prob)^(trials-success) * bin_combinations(trials, success)
}
bin_probability(5, 2, 0.5)
bin_distribution <- function(trials, prob) {
success <- 1:trials
probability <- rep(0, trials)
for (i in success) {
vec[i] <- bin_probability(trials, i, prob)
}
as.data.frame(success, probability)
}
bin_distribution(5, 0.5)
bin_distribution <- function(trials, prob) {
success <- 1:trials
probability <- rep(0, trials)
for (i in success) {
probability[i] <- bin_probability(trials, i, prob)
}
as.data.frame(success, probability)
}
bin_distribution(5, 0.5)
bin_distribution <- function(trials, prob) {
success <- 0:trials
probability <- rep(0, trials)
for (i in success) {
probability[i] <- bin_probability(trials, i, prob)
}
as.data.frame(success, probability)
}
bin_distribution(5, 0.5)
bin_distribution <- function(trials, prob) {
success <- 0:trials
probability <- rep(0, trials)
for (i in success) {
probability[i] <- bin_probability(trials, i, prob)
}
data.frame(success, probability)
}
bin_distribution(5, 0.5)
bin_distribution <- function(trials, prob) {
success <- 0:trials
probability <- rep(0, trials + 1)
for (i in success) {
probability[i] <- bin_probability(trials, i, prob)
}
data.frame(success, probability)
}
bin_distribution(5, 0.5)
bin_distribution <- function(trials, prob) {
success <- 0:trials
probability <- rep(0, trials + 1)
for (i in success) {
probability[i] <- bin_probability(trials, i, prob)
}
print(success)
print(probability)
data.frame(success, probability)
}
bin_distribution(5, 0.5)
bin_distribution <- function(trials, prob) {
success <- 0:trials
probability <- rep(0, trials + 1)
for (i in success) {
print(i)
probability[i] <- bin_probability(trials, i, prob)
}
data.frame(success, probability)
}
bin_distribution(5, 0.5)
bin_distribution <- function(trials, prob) {
success <- 0:trials
probability <- rep(0, trials + 1)
for (i in success) {
print(i)
probability[i] <- bin_probability(trials, i, prob)
print(probability[i])
}
data.frame(success, probability)
}
bin_distribution(5, 0.5)
bin_distribution <- function(trials, prob) {
success <- 0:trials
probability <- rep(0, trials + 1)
for (i in success) {
print(i)
probability[i] <- bin_probability(trials, 0, prob)
print(probability[i])
}
data.frame(success, probability)
}
bin_distribution(5, 0.5)
bin_distribution <- function(trials, prob) {
success <- 0:trials
probability <- rep(0, trials + 1)
for (i in success) {
probability[i + 1] <- bin_probability(trials, i, prob)
print(probability[i])
}
data.frame(success, probability)
}
bin_distribution(5, 0.5)
bin_distribution(5, 0.5)
bin_distribution <- function(trials, prob) {
success <- 0:trials
probability <- rep(0, trials + 1)
for (i in success) {
probability[i + 1] <- bin_probability(trials, i, prob)
}
data.frame(success, probability)
}
bin_distribution(5, 0.5)
knitr::opts_chunk$set(echo = TRUE, error = TRUE, fig.path = "images/")
source("code/binomial-functions.R")
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
bin_distribution(10, .25)
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
df1 <- bin_distribution(10, .25)
df1
barplot(df1)
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
df1 <- bin_distribution(10, .25)
df1
barplot(df1[1], df1[2])
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
df1 <- bin_distribution(10, .25)
df1
barplot(df1[[1]], df1[[2]])
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
df1 <- bin_distribution(10, .25)
df1
hist(df1[[1]], df1[[2]])
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
df1 <- bin_distribution(10, .25)
df1
hist(df1)
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
df1 <- bin_distribution(10, .25)
df1
hist(df1[[1]])
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
df1 <- bin_distribution(10, .25)
df1
hist(df1[[2]])
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
df1 <- bin_distribution(10, .25)
df1
hist(df1[[1]])
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
df1 <- bin_distribution(10, .25)
df1
barplot(df1[[1]], df1[[2]])
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
df1 <- bin_distribution(10, .25)
df1
barplot(df1[[2]])
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
df1 <- bin_distribution(10, .25)
df1
barplot(df1[[2]], xlim = df1[[1]])
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
df1 <- bin_distribution(10, .25)
df1
barplot(df1[[2]], xlab = df1[[1]])
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
df1 <- bin_distribution(10, .25)
df1
barplot(df1[[2]], xlab = df1[1])
#' @title bin_distribution
#' @description calculates the distribution of the binomial probability
#' @param trials nonnegative integer, total trials
#' @param prob probability of success, valid probability
#' @return data frame of the binomial distribution
bin_distribution <- function(trials, prob) {
success <- c(0:trials)
probability <- rep(0, trials + 1)
for (i in success) {
probability[i + 1] <- bin_probability(trials, i, prob)
}
data.frame(success, probability)
}
bin_distribution(5, 0.5)
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
df1 <- bin_distribution(10, .25)
df1
barplot(df1[[2]], xlab = df1[1])
source("code/binomial-functions.R")
bin_probability(10, 3, 1/6)
df1 <- bin_distribution(10, .25)
df1
barplot(df1[[2]])
df2 <- bin_distribution(15, .35)
df2
barplot(df2[[2]])
df1 <- bin_distribution(10, .25)
df1
barplot(df1[[2]])
bin_probability(10, 3, 1/6)
df2 <- bin_distribution(15, .35)
df2
barplot(df2[[2]], c(1:15))
df2 <- bin_distribution(15, .35)
df2
barplot(df2[[2]], xlab = c(1:15))
df2 <- bin_distribution(15, .35)
df2
barplot(df2[[2]], xlab = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
df2 <- bin_distribution(15, .35)
df2
barplot(df2[[2]], xlim = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
df2 <- bin_distribution(15, .35)
df2
barplot(df2[[2]])
df2 <- bin_distribution(15, .35)
df2
barplot(df2[[2]], names.arg = df2[[1]])
df1 <- bin_distribution(10, .25)
df1
barplot(df1[[2]], names.arg = df1[[1]])
prob <- 0
for (i in 4:5) {
prob <- prob + bin_probability(5, i, .35)
}
prob
prob <- 0
for (i in 0:5) {
prob <- prob + bin_probability(5, i, .35)
}
prob
